package com.huybq.fund_management.utils.chatops;

import com.huybq.fund_management.domain.chatopsApi.ChatopsService;
import com.huybq.fund_management.domain.team.Team;
import com.huybq.fund_management.domain.team.TeamService;
import com.huybq.fund_management.domain.user.User;
import com.huybq.fund_management.domain.user.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
@RequiredArgsConstructor
public class Notification {
    private final TeamService teamService;
    private final ChatopsService chatopsService;
    private final UserRepository userRepository;

    private static final String API_URL = "https://chat.runsystem.vn/api/v4/posts";

    public void sendNotification(String messageContent, String teamSlug) {
        try {
            Team team = teamService.getTeamBySlug(teamSlug);
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Authorization", "Bearer " + team.getToken());

            Map<String, String> body = new HashMap<>();
            body.put("message", messageContent);
            body.put("channel_id", team.getChannelId());

            HttpEntity<Map<String, String>> requestEntity = new HttpEntity<>(body, headers);

            ResponseEntity<String> response = restTemplate.exchange(API_URL, HttpMethod.POST, requestEntity, String.class);

            System.out.println(response.getStatusCode() + ": " + response.getBody());
        } catch (Exception e) {
            System.err.println("L·ªói khi g·ª≠i th√¥ng b√°o: " + e.getMessage());
            e.printStackTrace(); // In stack trace ƒë·ªÉ d·ªÖ debug
        }
    }

    public void sendNotificationForMember(String messageContent, String senderEmail, String receiverEmail) {
        try {
            // L·∫•y th√¥ng tin user nh·∫≠n b·∫±ng email
            Map<String, Object> receiver = chatopsService.getUserByEmail(receiverEmail);
            String receiverId = (String) receiver.get("id");

            Map<String, Object> sender = chatopsService.getUserByEmail(senderEmail);
            String senderId = (String) sender.get("id");

            // T·∫°o channel direct gi·ªØa sender v√† receiver
            String channelId = chatopsService.getDirectChannelId(receiverId, senderId);

            // G·ª≠i tin nh·∫Øn
            chatopsService.sendMessage(channelId, messageContent);

        } catch (Exception e) {
            System.err.println("Failed to send message to " + receiverEmail + ": " + e.getMessage());
        }
    }

    @Scheduled(cron = "0 0 8 * * ?", zone = "Asia/Ho_Chi_Minh")
    public void sendBirthdayAndAnniversaryNotifications() {
        LocalDate today = LocalDate.now();

        List<User> users = userRepository.findAllByIsDeleteIsFalse();

        for (User user : users) {
            if (user.getDob() != null &&
                    user.getDob().getMonth() == today.getMonth() &&
                    user.getDob().getDayOfMonth() == today.getDayOfMonth()) {
                String message = "@all\nüéÇ H√¥m nay l√† sinh nh·∫≠t c·ªßa " + user.getFullName() + " üéâ\n"
                        +"Ch√∫ng ta h√£y c√πng g·ª≠i nh·ªØng l·ªùi ch√∫c sinh nh·∫≠t th·∫≠t nhi·ªÅu √Ω nghƒ©a t·ªõi nh·ªØng ng∆∞·ªùi ƒë·ªìng nghi·ªáp c·ªßa m√¨nh nh√©!\n"
                        + ":emo_flower: Ch√∫c b·∫°n m·ªôt ng√†y sinh nh·∫≠t vui v·∫ª v√† th·∫≠t nhi·ªÅu ni·ªÅm vui!";
                sendNotification( message,"java");
            }

            // th√¥ng b√°o k·ª∑ ni·ªám gia nh·∫≠p
            if (user.getJoinDate() != null &&
                    user.getJoinDate().getMonth() == today.getMonth() &&
                    user.getJoinDate().getDayOfMonth() == today.getDayOfMonth()) {
                int years = today.getYear() - user.getJoinDate().getYear();
                String message = "@all\nüéâ H√¥m nay l√† k·ª∑ ni·ªám " + years + " nƒÉm " + user.getFullName()
                        + " gia nh·∫≠p team!\nC·∫£m ∆°n b·∫°n ƒë√£ ƒë·ªìng h√†nh c√πng t·∫≠p th·ªÉ team v√† c√¥ng ty nh√©!‚ù§Ô∏è";
                sendNotification(message, "java");
            }
        }
    }

    public static void main(String[] args) {
//        Notification notification = new Notification("java");
//        notification.sendNotification("@all\n:warning: TH√îNG B√ÅO DANH S√ÅCH ƒêI L√ÄM MU·ªòN 2025/03/24\n---\nM·∫∑c d√π ƒë√£ nh·∫Øc nh·ªü nh∆∞ng v·∫´n c√≤n nh·ªØng b·∫°n ƒëi l√†m mu·ªôn h√¥m nay:\n\n|NAME | CHECKIN AT|\n|--- | ---|\n|MAI ƒê√åNH ƒê√îNG | Ngh·ªâ ph√©p|\n|NGUY·ªÑN TH·ªä TH∆† | 08:04:16|\n|NGUY·ªÑN THANH T√ö | 07:27:01 (C√≥ ƒë∆°n NP)|\n|L√ù TI·ªÇU B·∫∞NG | 08:05:20|\n|L√ä MINH TO√ÄN | Ngh·ªâ ph√©p|\n|PH·∫†M V≈® DUY LU√ÇN | Ngh·ªâ ph√©p|\n|NGUY·ªÑN THANH H·∫¢I | 08:26:25|\n|ƒê·ªñ ƒê·ª®C NH·∫¨T | -|\n|V≈® TRUNG HI·∫æU | Ngh·ªâ ph√©p|\n|PH·∫†M HO√ÄNG HUY | 07:47:27 (C√≥ ƒë∆°n NP)|\n\nR·∫•t mong m·ªçi ng∆∞·ªùi s·∫Ω tu√¢n th·ªß quy ƒë·ªãnh v√† ƒë·∫øn ƒë√∫ng gi·ªù!\n\nH√£y c√πng nhau x√¢y d·ª±ng m√¥i tr∆∞·ªùng l√†m vi·ªác chuy√™n nghi·ªáp nh√©  :muscle: \n\nTr√¢n tr·ªçng!\n#checkin-statistic\n\n![image](https://drive.google.com/uc?export=download&id=1Rj3_T_EoxvsBx-6gwAcfxOdSF8AUg6ui)");
    }
}
